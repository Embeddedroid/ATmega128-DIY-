#include <avr/io.h>
#include <avr/interrupt.h>
#define F_CPU 16000000UL
#define __DELAY_BACKWARD_COMPATIBLE__

#include <util/delay.h>

#define DO 0
#define RE 1
#define MI 2
#define FA 3
#define SOL 4
#define RA 5
#define SI 6
#define DDO 7
#define REST 8
#define EOS -1		// End Of Song 표시
#define ON 0		// 버저 ON
#define OFF 1		// 버저 OFF

#define N2 1250		// 60*1000/96*2
#define N4 625		// 60*1000/96
#define N8N16 469	// N8+N16
#define N8 313		// 60*1000/96/2
#define N16 156		// 60*1000/96/4
#define R	1		// 묵음은 1ms

volatile int state, tone;
char f_table[]={17,43,66,77,			// 도레미파솔라시도에 해당하는
				97,114,117,137,255};	// TCNT0 값을 미리 계산한 값
int song[]={SOL,MI,REST,MI,SOL,MI,DO,RE,MI,RE,DO,MI,SOL,DDO,
			SOL,DDO,SOL,DDO,SOL,MI,SOL,RE,FA,MI,RE,DO,EOS};
int time[]={N4,N8,R,N8,N8,N8,N4,N4,N8,N8,N8,N8,N4,N8N16,N16,N8,N8,N8,N4,N4,N8,N8,N8,N8,N4};	// 산토끼 박자
char LED[]={0x01,0x02,0x04,0x08,0x10,0x20,0x40,0x80,0x00};	// 각 음계에 대응되는 LED 값

ISR(TIMER0_OVF_vect)	//TIMER/COUNTER0 overflow interrupt service routine
{
	TCNT0=f_table[tone];	//TCNT0 초기화(주어진 음을 만들기 위한)
	if(state==OFF)
	{
		PORTB|=1<<4;	// 버저 포트 ON
		state=ON;
	}
	else
	{
		PORTB&=~(1<<4);	// 버저 포트 ON
		state=OFF;
	}
}

int main(void)
{
	int i=0;
	DDRA=0xff;						// LED는 출력
	DDRB|=0x10;						// 버저 연결 포트(PB4) 출력 설정
	TCCR0=0x03;						// pre-scaler 32분주
	TIMSK=0x01;						// 오버플로우 인터럽트 활성화, TOIE0 비트 세트
	TCNT0=f_table[song[i]];			// TCNT0 초기화
	sei();							// 전역 인터럽트 활성화
	while(1)
	{
		i=0;						// 노래 반복 초기화
		do{
			tone=song[i];			// 현재 음계
			PORTA=LED[tone];		// LED 표시
			_delay_ms(time[i++]);	// TCNT0 초기화
		}while(song[i]!=EOS);		// 노래 마지막 음인지 검사
	}
}
