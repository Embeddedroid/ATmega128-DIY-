#include <avr/io.h>
#include <avr/interrupt.h>
#define F_CPU	16000000UL
#include <util/delay.h>

#define IDLE 0
#define STOP 1
#define GO 2

unsigned char digit[10]={0x3f,0x06,0x5b,0x4f,0x66,0x6d,0x7c,0x07,0x7f,0x6f};
unsigned char fnd_sel[4]={0x01,0x02,0x04,0x08};
volatile int cur_time=0;
volatile int stop_time=0;
volatile int state=IDLE;

ISR(INT4_vect)
{
	_delay_ms(100);	//스위치 바운스 기간 동안 기다림
	EIFR=1<<4;		//그 사이에 바운스에 의하여 생긴 인터럽트는 무효화
	if((PINE&0x10)==0x10)	//인터럽트 입력 핀(PE4)를 다시 검사하여
	{						//SW1이 눌러진 상태가 아니면 리턴
		return;
	}
	if((state==IDLE)||(state==STOP))
	{
		state=GO;
	}
	else
	{
		state=STOP;
		stop_time=cur_time;
	}
}

ISR(INT5_vect)
{
	_delay_ms(100);
	EIFR=1<<5;
	if((PINE&0x20)==0x20)
	{
		return;
	}
	state=IDLE;
	cur_time=0;
	stop_time=0;

}

void init_stopwatch(void);

void display_fnd(int count);

int main(void)
{
	init_stopwatch();
	while(1)
	{
		if(state==IDLE)
		{
			display_fnd(stop_time);
		}
		else if(state==STOP)
		{
			display_fnd(stop_time);
			cur_time++;
		}
		else
		{
			display_fnd(cur_time);
			cur_time++;
		}
		if(cur_time==10000)
			cur_time=0;
	}
	return 0;
}

void init_stopwatch(void)
{
	DDRC=0xff;
	DDRG=0x0f;
	DDRE=0x00;
	sei();	//SREG의 I 비트는 1로 세트
	//SREG 레지스터의 다른 비트는 원래 값이 변경되지 않도록 OR연산자 사용
	EICRB=0x0a;//하강에지트리거 일때 인터럽트 발생
	EIMSK=0x30;//INT4,INT5 인터럽트 사용가능
}

void display_fnd(int count)
{
	int i,fnd[4];
	
	fnd[3]=(count/1000)%10;
	
	fnd[2]=(count/100)%10;
	
	fnd[1]=(count/10)%10;
	
	fnd[0]=count%10;
	
	for(i=0;i<4;i++)
	{
		if(i==2)
		{
			PORTC=digit[fnd[i]] | 0x80;
		}
		else
			PORTC=digit[fnd[i]];
		PORTG=fnd_sel[i];
		if(i%2)
			_delay_ms(2);	//i 가 짝수 일 때는 2ms
		else
			_delay_ms(3);	//i 가 홀수 일 때는 3ms
			//4번 루프를 도므로 총 10ms(1/100초 경과)
	}
}
